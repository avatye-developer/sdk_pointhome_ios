// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name AvatyePointHome
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import AdCashFramework
import AdSupport
import AppTrackingTransparency
import CommonCrypto
import CoreTelephony
import DeveloperToolsSupport
import Foundation
import Network
import Security
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol AdPopupViewDelegate : AnyObject {
  func onBannerLoaded(_ apid: Swift.String)
  func onBannerFailed(_ apid: Swift.String, error: AdCashFramework.AdCashErrorModel)
  func onBannerClicked(_ apid: Swift.String)
  func onBannerRemoved(_ apid: Swift.String)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class AdPopupView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any AvatyePointHome.AdPopupViewDelegate)?
  @_Concurrency.MainActor @preconcurrency public init(rootViewController: UIKit.UIViewController, appId: Swift.String, appSecretKey: Swift.String, apid: Swift.String, size: AdCashFramework.BannerAdSize)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public func setAdPopupView(bottom: CoreFoundation.CGFloat = -1, trailing: CoreFoundation.CGFloat = -1, backdrop: Swift.Bool = true, closeButton: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency public func popupAdLoad()
  @_Concurrency.MainActor @preconcurrency public func showAdPopupView(delay: CoreFoundation.CGFloat = 0, size: CoreFoundation.CGFloat = 18, margin: CoreFoundation.CGFloat = 1, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public func removeAdPopup()
}
extension AvatyePointHome.AdPopupView : AdCashFramework.BannerAdLoaderDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onBannerLoaded(_ apid: Swift.String, adView: UIKit.UIView, size: CoreFoundation.CGSize)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onBannerRemoved(_ apid: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onBannerClicked(_ apid: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onBannerFailed(_ apid: Swift.String, error: AdCashFramework.AdCashErrorModel)
}
@_hasMissingDesignatedInitializers public class UtiityManager {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CBPointHomeWebView : WebKit.WKWebView {
  @_Concurrency.MainActor @preconcurrency public var delegate: (any AvatyePointHome.PHWebViewDelegate)?
  @_Concurrency.MainActor @preconcurrency public init(frame: CoreFoundation.CGRect, rootViewController: UIKit.UIViewController, appId: Swift.String, appSecretKey: Swift.String, userKey: Swift.String, openKey: Swift.String = "pointhome")
  @_Concurrency.MainActor @preconcurrency public func startWebView(widgetID: Swift.String, actionID: Swift.String)
  @objc deinit
}
extension AvatyePointHome.CBPointHomeWebView : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
}
extension AvatyePointHome.CBPointHomeWebView : AvatyePointHome.PHWebViewDelegate {
  @_Concurrency.MainActor @preconcurrency public func webEventListener(event: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func webSystemEventListener(event: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func pointHomeOpenDelegate(caller: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func PointHomeCloseDelegate(caller: Swift.String)
}
public struct userProfileResponse : Swift.Codable {
  public let profile: AvatyePointHome.userProfile?
  public let cash: AvatyePointHome.userCash?
  public let button: AvatyePointHome.userButton?
  public let ticket: AvatyePointHome.userTicket?
  public let box: AvatyePointHome.userBox?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct userProfile : Swift.Codable {
  public let userID: Swift.String
  public let isGuest: Swift.Bool
  public let nickname: Swift.String?
  public let birthDate: Swift.String?
  public let gender: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct userCash : Swift.Codable {
  public let balance: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct userButton : Swift.Codable {
  public let gettableCash: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct userTicket : Swift.Codable {
  public let touchTicket: AvatyePointHome.userTicketModel?
  public let videoTicket: AvatyePointHome.userTicketModel?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct userTicketModel : Swift.Codable {
  public let receivedCount: Swift.Int
  public let limitCount: Swift.Int
  public let period: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct userBox : Swift.Codable {
  public let isCashBoxGettable: Swift.Bool
  public let isAttendanceBoxGettable: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct acceptedUserModel : Swift.Codable {
  public let usable: Swift.Bool
  public let message: Swift.String?
  public init(usable: Swift.Bool, message: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol AvatyePHDelegate : ObjectiveC.NSObjectProtocol {
  func pointHomeEventListener(event: Swift.String)
  func pointHomeSystemEventListener(event: Swift.String)
  func pointHomeSliderOpened(caller: Swift.String)
  func pointHomeSliderClosed(caller: Swift.String)
}
public class AvatyePHService {
  public var delegate: (any AvatyePointHome.AvatyePHDelegate)?
  public init(rootViewController: UIKit.UIViewController, appId: Swift.String, appSecretKey: Swift.String, userKey: Swift.String? = nil, openKey: Swift.String = "pointhome", fullScreen: Swift.Bool = false)
  public func setCashButton(bottom: CoreFoundation.CGFloat = -1, trailing: CoreFoundation.CGFloat = -1)
  public func getUserAgent() -> Swift.String
  public func removePHService()
  public func openPointHome(completion: @escaping (AvatyePointHome.PointHomeOpen<Swift.String, AvatyePointHome.PointHomeErrorModel>) -> Swift.Void)
  public func closePointHome(completion: @escaping () -> Swift.Void)
  public func sendMessage(message: Swift.String, completion: ((Any?, (any Swift.Error)?) -> Swift.Void)? = nil)
  public func convertFunc(convert: @escaping (Swift.String) async throws -> Swift.String)
  public func acceptUserFunc(closure: @escaping (Swift.String) async throws -> AvatyePointHome.acceptedUserModel)
  public func GFPAdManagerRegisterFunc(_ closure: @escaping (WebKit.WKWebView) -> Swift.Void)
  public func userDataChanged(token: Swift.String, completion: @escaping (AvatyePointHome.PointHomeCBType) -> Swift.Void)
  @objc deinit
}
extension AvatyePointHome.AvatyePHService : AvatyePointHome.PHWebViewDelegate {
  public func pointHomeOpenDelegate(caller: Swift.String)
  public func PointHomeCloseDelegate(caller: Swift.String)
  public func webSystemEventListener(event: Swift.String)
  public func webEventListener(event: Swift.String)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class AdBannerView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any AvatyePointHome.AdPopupViewDelegate)?
  @_Concurrency.MainActor @preconcurrency public init(rootViewController: UIKit.UIViewController, appId: Swift.String, appSecretKey: Swift.String, apid: Swift.String, size: AdCashFramework.BannerAdSize)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public func popupAdLoad()
  @_Concurrency.MainActor @preconcurrency public func removeAdBanner()
  @_Concurrency.MainActor @preconcurrency public func showAdBannerView(bottom: CoreFoundation.CGFloat = -1, trailing: CoreFoundation.CGFloat = -1, bgColor: Swift.String? = nil, completion: (Swift.Bool) -> Swift.Void)
}
extension AvatyePointHome.AdBannerView : AdCashFramework.BannerAdLoaderDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onBannerLoaded(_ apid: Swift.String, adView: UIKit.UIView, size: CoreFoundation.CGSize)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onBannerFailed(_ apid: Swift.String, error: AdCashFramework.AdCashErrorModel)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onBannerClicked(_ apid: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onBannerRemoved(_ apid: Swift.String)
}
@_hasMissingDesignatedInitializers public class AvatyePH {
  public static func initialize(appId: Swift.String, appSecretKey: Swift.String, useExternalToken: Swift.Bool = false, logLevel: AvatyePointHome.LogLevel = .info)
  public static func initializeAppLovin(_ appLovinKey: Swift.String)
  public static func initializePangle(_ pangleKey: Swift.String)
  public static func initializeVungle(_ vungleKey: Swift.String)
  public static func devModeChange(value: Swift.String? = nil)
  public static func testModeChange(value: Swift.Bool)
  public static func getUserProfile(appId: Swift.String, appSecretKey: Swift.String, userKey: Swift.String? = nil, resource: Swift.String? = nil, completion: @escaping (AvatyePointHome.PointHomeResultType<AvatyePointHome.userProfileResponse>) -> Swift.Void)
  public static func withDrawUser(appId: Swift.String, userKey: Swift.String, reason: Swift.String = "default", completion: @escaping (AvatyePointHome.PointHomeWithDrawType) -> Swift.Void)
  @objc deinit
}
public class TokenUtil {
  public init()
  public func getToken(appId: Swift.String, appSecretKey: Swift.String, userKey: Swift.String, isChanneling: Swift.Bool) async throws -> Swift.Result<Swift.String, AvatyePointHome.TokenError>
  public func getOTP(appId: Swift.String, appSecretKey: Swift.String, userKey: Swift.String, isChanneling: Swift.Bool) async throws -> Swift.Result<Swift.String, AvatyePointHome.TokenError>
  public func deleteToken(appId: Swift.String, userKey: Swift.String)
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency public class AvatyeWebSDKController : ObjectiveC.NSObject, WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor @preconcurrency public init(rootWebView: WebKit.WKWebView)
  @_Concurrency.MainActor @preconcurrency @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @objc deinit
}
public enum PointHomeCBType {
  case success
  case failure
  public static func == (a: AvatyePointHome.PointHomeCBType, b: AvatyePointHome.PointHomeCBType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PointHomeOpenType {
  case success
  case pathErr
  case serverErr
  case inMaintenance
  case networkFail
  case unRecognizedError
  case expireToken
  public static func == (a: AvatyePointHome.PointHomeOpenType, b: AvatyePointHome.PointHomeOpenType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PointHomeOpen<T, E> {
  case success(T)
  case failure(E)
}
public struct PointHomeErrorModel : Swift.Error {
  public let code: Swift.Int
  public let type: Swift.String
  public let message: Swift.String
}
public enum TokenError : Swift.Error {
  case pathErr
  case serverErr
  case inMaintenance
  case networkFail
  case unRecognizedError
  case expireToken
  public static func == (a: AvatyePointHome.TokenError, b: AvatyePointHome.TokenError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PointHomeError {
  case EXCEPTION_UNKNOWN
  case NETWORK_ERROR
  case EXCEPTION_KNOWN
  case INITIALIZE_ERROR
  case EXPIRE_TOKEN
  case INVALID_USERKEY
  case SERVER_ERROR
  case IN_MAINTENANCE
  public static func == (a: AvatyePointHome.PointHomeError, b: AvatyePointHome.PointHomeError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PointHomeResultType<T> {
  case success(T)
  case pathErr
  case serverErr
  case inMaintenance
  case networkFail
  case unRecognizedError
  case expireToken
  case notAgreed
}
public enum PointHomeWithDrawType {
  case success
  case unRecognizedError
  case notAgreed
  public static func == (a: AvatyePointHome.PointHomeWithDrawType, b: AvatyePointHome.PointHomeWithDrawType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum LogLevel : Swift.Int, Swift.CustomStringConvertible {
  case debug
  case info
  case error
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PointHomeLogger {
  public static func debug(_ message: Swift.String, file: Swift.String = #file, line: Swift.Int = #line, function: Swift.String = #function)
  public static func info(_ message: Swift.String, file: Swift.String = #file, line: Swift.Int = #line, function: Swift.String = #function)
  public static func error(_ message: Swift.String, file: Swift.String = #file, line: Swift.Int = #line, function: Swift.String = #function)
  @objc deinit
}
extension Foundation.Data {
  public func avatyeSha256() -> Swift.String
}
extension Swift.String {
  public func avatyeSha256() -> Swift.String
}
public protocol PHWebViewDelegate : AnyObject {
  func webEventListener(event: Swift.String)
  func webSystemEventListener(event: Swift.String)
  func pointHomeOpenDelegate(caller: Swift.String)
  func PointHomeCloseDelegate(caller: Swift.String)
}
@_hasMissingDesignatedInitializers public class Reachability {
  public class func isConnectedToNetwork() -> Swift.Bool
  @objc deinit
}
extension AvatyePointHome.AvatyeWebSDKController : Swift.Sendable {}
extension AvatyePointHome.PointHomeCBType : Swift.Equatable {}
extension AvatyePointHome.PointHomeCBType : Swift.Hashable {}
extension AvatyePointHome.PointHomeOpenType : Swift.Equatable {}
extension AvatyePointHome.PointHomeOpenType : Swift.Hashable {}
extension AvatyePointHome.TokenError : Swift.Equatable {}
extension AvatyePointHome.TokenError : Swift.Hashable {}
extension AvatyePointHome.PointHomeError : Swift.Equatable {}
extension AvatyePointHome.PointHomeError : Swift.Hashable {}
extension AvatyePointHome.PointHomeWithDrawType : Swift.Equatable {}
extension AvatyePointHome.PointHomeWithDrawType : Swift.Hashable {}
extension AvatyePointHome.LogLevel : Swift.Equatable {}
extension AvatyePointHome.LogLevel : Swift.Hashable {}
extension AvatyePointHome.LogLevel : Swift.RawRepresentable {}
